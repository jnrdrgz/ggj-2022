[gd_scene load_steps=11 format=2]

[ext_resource path="res://Player.gd" type="Script" id=1]
[ext_resource path="res://Assets/spritesheet_ggh2_player.png" type="Texture" id=2]

[sub_resource type="Shader" id=7]
code = "/* 
Rainbow outline by @Farfalk and @ThePadDev, July 2021

Apply to canvas items with transparent backgrounds.
Check that there is sufficient transparent background space for the outline!

CC0 License (but citation is welcome <3)
*/

shader_type canvas_item;

uniform float line_thickness : hint_range(0, 20) = 1.0;    // thickness of the line
uniform float sin_frequency : hint_range(0.1, 2.0) = 0.5;  // frequency of the rainbow
uniform float sin_offset : hint_range(0.0, 360.0) = 0.0;   // offset of the rainbow, useful to differentiate objects using the same shader
uniform float light_offset : hint_range(0.25, 0.77) = 0.5;   // this offsets all color channels; if set to 0 only red green and blue colors will be shown.
uniform bool activate = false;

void fragment() {
	if(activate){
		vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		outline = min(outline, 1.0);
	
		vec4 animated_line_color = vec4(light_offset + sin(2.0*3.14*sin_frequency*TIME),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(120.0)),
							   light_offset + sin(2.0*3.14*sin_frequency*TIME + radians(240.0)),
							   1.0);
	
		vec4 color = texture(TEXTURE, UV);
		COLOR = mix(color, animated_line_color, outline - color.a);
	} else {
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/line_thickness = 1.0
shader_param/sin_frequency = 0.5
shader_param/sin_offset = 0.0
shader_param/light_offset = 0.5
shader_param/activate = false

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 10, 13.5 )

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 6 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:frame_coords")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 7, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 10, 15 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "die"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 10, 15 ), Vector2( 41, -17 ), Vector2( 50, 150 ) ]
}

[sub_resource type="Animation" id=2]
resource_name = "idle"
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 6, 7 ]
}

[sub_resource type="Animation" id=5]
resource_name = "jumping"
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 5 ]
}

[sub_resource type="Animation" id=6]
resource_name = "walking"
length = 0.25
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10 ]
}

[node name="Player" type="KinematicBody2D" groups=["player"]]
script = ExtResource( 1 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 13, 15 )
current = true
zoom = Vector2( 0.25, 0.25 )

[node name="ActionTimer" type="Timer" parent="."]

[node name="FloorTimer" type="Timer" parent="."]
one_shot = true

[node name="HasToGoBackInTimeTimer" type="Timer" parent="."]
one_shot = true

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 8 )
position = Vector2( 10, 15 )
scale = Vector2( 1.667, 1.27 )
texture = ExtResource( 2 )
hframes = 11
frame = 7

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 10, 14 )
shape = SubResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 3 )
anims/die = SubResource( 4 )
anims/idle = SubResource( 2 )
anims/jumping = SubResource( 5 )
anims/walking = SubResource( 6 )

[connection signal="timeout" from="FloorTimer" to="." method="_on_FloorTimer_timeout"]
[connection signal="timeout" from="HasToGoBackInTimeTimer" to="." method="_on_HasToGoBackInTimeTimer_timeout"]
